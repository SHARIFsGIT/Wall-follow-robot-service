// Generated by gencpp from file your_package_name/FindWallResponse.msg
// DO NOT EDIT!


#ifndef YOUR_PACKAGE_NAME_MESSAGE_FINDWALLRESPONSE_H
#define YOUR_PACKAGE_NAME_MESSAGE_FINDWALLRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace your_package_name
{
template <class ContainerAllocator>
struct FindWallResponse_
{
  typedef FindWallResponse_<ContainerAllocator> Type;

  FindWallResponse_()
    : wallfound(false)  {
    }
  FindWallResponse_(const ContainerAllocator& _alloc)
    : wallfound(false)  {
  (void)_alloc;
    }



   typedef uint8_t _wallfound_type;
  _wallfound_type wallfound;





  typedef boost::shared_ptr< ::your_package_name::FindWallResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::your_package_name::FindWallResponse_<ContainerAllocator> const> ConstPtr;

}; // struct FindWallResponse_

typedef ::your_package_name::FindWallResponse_<std::allocator<void> > FindWallResponse;

typedef boost::shared_ptr< ::your_package_name::FindWallResponse > FindWallResponsePtr;
typedef boost::shared_ptr< ::your_package_name::FindWallResponse const> FindWallResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::your_package_name::FindWallResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::your_package_name::FindWallResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::your_package_name::FindWallResponse_<ContainerAllocator1> & lhs, const ::your_package_name::FindWallResponse_<ContainerAllocator2> & rhs)
{
  return lhs.wallfound == rhs.wallfound;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::your_package_name::FindWallResponse_<ContainerAllocator1> & lhs, const ::your_package_name::FindWallResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace your_package_name

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::your_package_name::FindWallResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::your_package_name::FindWallResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::your_package_name::FindWallResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::your_package_name::FindWallResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::your_package_name::FindWallResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::your_package_name::FindWallResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::your_package_name::FindWallResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66229cd821efb4126c80f35757f3c73e";
  }

  static const char* value(const ::your_package_name::FindWallResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66229cd821efb412ULL;
  static const uint64_t static_value2 = 0x6c80f35757f3c73eULL;
};

template<class ContainerAllocator>
struct DataType< ::your_package_name::FindWallResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "your_package_name/FindWallResponse";
  }

  static const char* value(const ::your_package_name::FindWallResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::your_package_name::FindWallResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool wallfound\n"
;
  }

  static const char* value(const ::your_package_name::FindWallResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::your_package_name::FindWallResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wallfound);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FindWallResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::your_package_name::FindWallResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::your_package_name::FindWallResponse_<ContainerAllocator>& v)
  {
    s << indent << "wallfound: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wallfound);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOUR_PACKAGE_NAME_MESSAGE_FINDWALLRESPONSE_H
